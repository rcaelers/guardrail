name: Rust

on:
  push:
    branches: ["main", "dev"]
    tags:
      - "v*.*.*"
  pull_request:
    branches: ["main", "dev"]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-24.04

    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        run: |
          rustup toolchain install nightly
          rustup default nightly
          rustup target add wasm32-unknown-unknown
          rustup upgrade
          cargo install --locked cargo-leptos
          cargo install --locked sqlx-cli
          cargo install --locked cargo-llvm-cov

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}
      - name: Build
        run: |
          export SQLX_OFFLINE=1
          npm i
          npx @tailwindcss/cli -i ./crates/server/static/input.css -o ./crates/server/static/css/style.css --watch
          cargo leptos build -vv
          cargo build --workspace --all-features

  test:
    runs-on: ubuntu-24.04

    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/guardrail

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        run: |
          rustup toolchain install nightly
          rustup default nightly
          rustup target add wasm32-unknown-unknown
          rustup upgrade
          cargo install --locked cargo-leptos
          cargo install --locked sqlx-cli
          cargo install --locked cargo-llvm-cov

      - name: Run PostgreSQL container
        run: |
          docker run -d \
            --name safebase_db \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres \
            -e POSTGRES_DB=guardrail \
            -p 5432:5432 \
            -v ${{ github.workspace }}/dev/initdb/:/docker-entrypoint-initdb.d/:ro \
            --health-cmd "pg_isready -U postgres" \
            --health-interval 10s \
            --health-timeout 5s \
            --health-retries 5 \
            postgres:17

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 1
          done

      - name: Run tests
        run: |
          export SQLX_OFFLINE=1
          RUST_BACKTRACE=1 cargo test -p api -p repos -p jobs --no-fail-fast
