##
## Builder
##

FROM node AS style
RUN mkdir -p /app
WORKDIR /app
COPY . .

RUN npm install
RUN npx @tailwindcss/cli -i ./crates/server/static/input.css -o style.css

##
## Builder
##

FROM rustlang/rust:nightly-bookworm AS builder

RUN ARCH=$(uname -m) && \
  if [ "$ARCH" = "x86_64" ]; then \
    wget https://github.com/cargo-bins/cargo-binstall/releases/latest/download/cargo-binstall-x86_64-unknown-linux-musl.tgz && \
    tar -xvf cargo-binstall-x86_64-unknown-linux-musl.tgz; \
  elif [ "$ARCH" = "aarch64" ]; then \
    wget https://github.com/cargo-bins/cargo-binstall/releases/latest/download/cargo-binstall-aarch64-unknown-linux-musl.tgz && \
    tar -xvf cargo-binstall-aarch64-unknown-linux-musl.tgz; \
  else \
    echo "Unsupported architecture: $ARCH" && exit 1; \
  fi
RUN cp cargo-binstall /usr/local/cargo/bin

RUN apt-get update -y \
  && apt-get install -y --no-install-recommends clang
RUN cargo binstall cargo-leptos -y

RUN rustup target add wasm32-unknown-unknown

RUN mkdir -p /app
WORKDIR /app
COPY . .
COPY --from=style /app/style.css ./crates/server/static/css/

ARG SQLX_OFFLINE=true
RUN cargo leptos build --release --precompress -vv
RUN ls -laR /app/target/site

##
## Runtime
##

FROM debian:bookworm-slim AS runtime
WORKDIR /app

RUN apt-get update -y \
  && apt-get install -y --no-install-recommends openssl ca-certificates \
  && apt-get autoremove -y \
  && apt-get clean -y \
  && rm -rf /var/lib/apt/lists/*

COPY --from=builder /app/target/release/server /app/
COPY --from=builder /app/target/site /app/site

COPY config  /app/config/

ENV RUST_LOG="info"
ENV LEPTOS_SITE_ADDR="0.0.0.0:3000"
ENV LEPTOS_SITE_ROOT="site"

EXPOSE 3000

CMD ["/app/server"]
